/*
 * Copyright 2020 Rackspace US, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.rackspace.salus.event.processor.config;

import com.rackspace.salus.common.messaging.KafkaTopicProperties;
import com.rackspace.salus.event.processor.services.PartitionTracker;
import com.rackspace.salus.event.processor.services.UniversalMetricHandler;
import com.rackspace.salus.event.processor.services.UniversalMetricListener;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Bean;
import org.springframework.kafka.config.KafkaListenerEndpointRegistry;

@TestConfiguration
public class MultipleConsumerTestConfig {
  @MockBean
  UniversalMetricHandler handler;

  @Autowired
  KafkaTopicProperties properties;

  @Bean
  AppProperties appProperties1() {
    return new AppProperties();
  }

  @Bean
  AppProperties appProperties2() {
    return new AppProperties();
  }

  @Bean
  AppProperties appProperties3() {
    return new AppProperties();
  }

  // all consumers will share a registry, but that's ok
  // because they only look up info in their unique container
  @Autowired
  KafkaListenerEndpointRegistry registry;


  // To be able to create three consumers we need three different listenerIds (generated by
  // appProperties) and three different partition trackers.

  @Autowired
  @Qualifier("appProperties1")
  AppProperties appProperties1;

  @Autowired
  @Qualifier("appProperties2")
  AppProperties appProperties2;

  @Autowired
  @Qualifier("appProperties3")
  AppProperties appProperties3;

  @Bean
  PartitionTracker tracker1() {
    return new PartitionTracker(appProperties1, handler, registry);
  }

  @Bean
  PartitionTracker tracker2() {
    return new PartitionTracker(appProperties2, handler, registry);
  }

  @Bean
  PartitionTracker tracker3() {
    return new PartitionTracker(appProperties3, handler, registry);
  }

  @Autowired
  @Qualifier("tracker1")
  PartitionTracker tracker1;

  @Autowired
  @Qualifier("tracker2")
  PartitionTracker tracker2;

  @Autowired
  @Qualifier("tracker3")
  PartitionTracker tracker3;

  @Bean
  UniversalMetricListener consumer1() {
    return new UniversalMetricListener(appProperties1, handler, properties, registry,
        tracker1, "event-processor", "test");
  }

  @Bean
  UniversalMetricListener consumer2() {
    return new UniversalMetricListener(appProperties2, handler, properties, registry,
        tracker2, "event-processor", "test");
  }

  @Bean
  UniversalMetricListener consumer3() {
    return new UniversalMetricListener(appProperties3, handler, properties, registry,
        tracker3, "event-processor", "test");
  }
}
